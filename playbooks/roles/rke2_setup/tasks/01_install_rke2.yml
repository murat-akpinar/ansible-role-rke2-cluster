# Steps to install RKE2
---

- name: Check rke2-server service status
  ansible.builtin.shell: systemctl status rke2-server.service
  register: rke2_status
  changed_when: false
  failed_when: false
  ignore_errors: true
  when: inventory_hostname == 'master1'

- name: Install RKE2 on master node
  ansible.builtin.shell: |
    curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=server sh -
  when: inventory_hostname == 'master1' and rke2_status.stdout.find("active") == -1
  become: true
  notify:
    - Restart rke2-server


- name: Ensure RKE2 server is enabled and running
  ansible.builtin.systemd:
    name: rke2-server
    enabled: yes
    state: started
  when: inventory_hostname == 'master1'
  become: true

- name: Wait for RKE2 server to become ready
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/server/node-token
    state: present
  when: inventory_hostname == 'master1'
  become: true
  retries: 5
  delay: 10

- name: Check if kubectl symbolic link already exists
  ansible.builtin.stat:
    path: /usr/local/bin/kubectl
  register: kubectl_link

- name: Find kubectl binary path
  ansible.builtin.shell: find /var/lib/rancher/rke2/data/ -name kubectl | head -n 1
  register: kubectl_binary_path
  when: not kubectl_link.stat.exists

- name: Create symbolic link for kubectl
  ansible.builtin.shell: ln -s {{ kubectl_binary_path.stdout }} /usr/local/bin/kubectl
  when: not kubectl_link.stat.exists and kubectl_binary_path.stdout != ''
  become: true

- name: Set KUBECONFIG environment variable globally
  ansible.builtin.lineinfile:
    path: /etc/environment
    line: 'KUBECONFIG="/etc/rancher/rke2/rke2.yaml"'
    create: yes
  become: true

- name: Ensure RKE2 directory exists on worker nodes
  ansible.builtin.file:
    path: /etc/rancher/rke2
    state: directory
    mode: '0755'
  become: true
  when: "'worker' in group_names"

- name: Check if RKE2 server is running
  ansible.builtin.command: systemctl is-active rke2-server
  register: rke2_server_status
  failed_when: rke2_server_status.stdout != "active"
  become: true
  when: inventory_hostname == 'master1'
  retries: 5
  delay: 10
  until: rke2_server_status.stdout == "active"

- name: Fetch RKE2 node token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: rke2_node_token
  when: inventory_hostname == 'master1'
  become: true
  run_once: true

- name: Check if RKE2 agent is already installed
  ansible.builtin.shell: systemctl status rke2-agent.service
  register: rke2_agent_status
  changed_when: false
  failed_when: false
  ignore_errors: true
  when: "'worker' in group_names"

- name: Install RKE2 on worker nodes
  ansible.builtin.shell: |
    curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE='agent' sh -
  when: "'worker' in group_names and rke2_agent_status.rc != 0"
  become: true
  notify:
    - Restart rke2-agent


- name: Set up RKE2 agent environment file on worker nodes
  ansible.builtin.template:
    src: templates/rke2_agent_config.j2
    dest: /etc/rancher/rke2/config.yaml
  vars:
    master_ip: "{{ hostvars['master1'].ansible_host }}"
    master_token: "{{ rke2_node_token.content | b64decode }}"
  when: "'worker' in group_names"
  become: true

- name: Ensure RKE2 agent is enabled and running
  ansible.builtin.systemd:
    name: rke2-agent
    enabled: yes
    state: started
  when: "'worker' in group_names"
  become: true

- name: Define the user name with UID 1000
  command: getent passwd 1000
  register: getent_passwd_result
  changed_when: false

- name: Set user name variable from getent passwd output
  set_fact:
    uid_1000_user: "{{ getent_passwd_result.stdout.split(':')[0] }}"
  when: getent_passwd_result.stdout != ''

- name: Create .kube directory for user with UID 1000
  ansible.builtin.file:
    path: "/home/{{ uid_1000_user }}/.kube"
    state: directory
    mode: '0755'
    owner: "{{ uid_1000_user }}"
    group: "{{ uid_1000_user }}"
  when: inventory_hostname == 'master1' and uid_1000_user is defined

- name: Copy rke2.yaml to user's kube config
  ansible.builtin.copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: "/home/{{ uid_1000_user }}/.kube/config"
    remote_src: yes
    owner: "{{ uid_1000_user }}"
    group: "{{ uid_1000_user }}"
    mode: '0600'
  when: inventory_hostname == 'master1' and uid_1000_user is defined

- name: Set KUBECONFIG environment variable for user with UID 1000
  ansible.builtin.lineinfile:
    path: "/home/{{ uid_1000_user }}/.bashrc"
    line: 'export KUBECONFIG=/home/{{ uid_1000_user }}/.kube/config'
    create: yes
  when: inventory_hostname == 'master1' and uid_1000_user is defined

- name: Label the Kubernetes nodes with specific roles
  ansible.builtin.command:
    cmd: kubectl label nodes {{ item.name }} node-role.kubernetes.io/{{ item.role }}=true --overwrite
  loop:
    - { name: 'rke2-worker', role: 'worker-1' }
    - { name: 'rke2-worker2', role: 'worker-2' }
  register: label_nodes_output
  changed_when: "'labeled' in label_nodes_output.stdout"
  failed_when: "label_nodes_output.rc != 0 and 'already has a value' not in label_nodes_output.stderr"
  when: inventory_hostname == 'master1'
- name: Gather hostnames of worker nodes
  ansible.builtin.set_fact:
    worker_hostnames: "{{ groups['worker'] | map('extract', hostvars, 'ansible_hostname') | list }}"


- name: Label the Kubernetes nodes with specific roles
  ansible.builtin.command:
    cmd: kubectl label nodes {{ item.name }} node-role.kubernetes.io/{{ item.role }}=true --overwrite
  loop:
    - { name: '{{ worker_hostnames[0] }}', role: 'worker-1' }
    - { name: '{{ worker_hostnames[1] }}', role: 'worker-2' }
  register: label_nodes_output
  changed_when: "'labeled' in label_nodes_output.stdout"
  failed_when: "label_nodes_output.rc != 0 and 'already has a value' not in label_nodes_output.stderr"
  when: inventory_hostname == 'master1'
